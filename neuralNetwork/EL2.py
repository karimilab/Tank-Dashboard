### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -170 + 273.15;
    Tmax = -130 + 273.15;
    x = (x - Tmin) / (Tmax - Tmin);

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[-7.9402287795160839678], [-3.2244637695837043978], [3.737670373465262319], [-0.70759110464759877868], [-1.1227118314895674356],
          [0.27129204192238776105], [-2.0744509402214572624], [0.62898796696122738492], [9.6293213915527200442], [3.3303444525938203924]]
    b1 = np.array(b1)

    IW1_1 = [[7.2276937995113375024], [3.222644446093363868], [-5.7932131639648059007], [0.91160090526463732896], [7.8378391640211830804],
             [3.8275751963433988223], [-6.9741776372266102157], [0.71955145667906150742], [12.584921892327072257], [2.6296594807543414163]]
    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.21208333349092595155], [1.0176537378027088465]]
    b2 = np.array(b2)

    LW2_1 = [[0.010819146453462892207, 0.034930374749823404901, -0.00038233384967496195387, 0.72021263978136051964,
             7.6242528120389765705*10**(-5), 0.0012354059016870663421, -0.00011132308154420081261, 1.1682634970567662425,
             3.0069925867685728016*10**(-5), 0.051300614742392607048], [0.00096099331854591733826, -0.0052641272697283893189,
             0.0019459501906280991367, 0.0061198775369804203281, 0.0010459267723426039082, 0.0093039298166046544014,
             -0.0034308521525995747635, -1.9715067039200186993, -0.0024849521062834910301, -0.30531752715771492968]]
    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[4.24648319367447*10**(-5)], [0.0349863442009991]]
    y1_xoffset = [[4792.79641551804], [2339.22823360276]]

    xp1 = [(x[i][0] - x_xoffset) * x_gain + x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1), 0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,0]

