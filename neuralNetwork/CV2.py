### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd


def ANN(x):
    x = np.array(x)

    Tmin = -170 + 273.15
    Tmax = -130 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[-11.552177085744270713], [-9.7181878089745037386], [-5.0914340640451207776], [4.2533089182999148647],
          [-1.040138075187520883],
          [-21.295104853466106931], [0.17158873836762447707], [7.0743806263191695294], [7.5505910328477252591],
          [-17.144258266353340048]]
    b1 = np.array(b1)

    IW1_1 = [[11.543477428827204179], [11.002802968908429904], [6.6155274440597073848], [-7.5920669446234727573],
             [1.2901573215125679006],
             [-182.08025666488339311], [0.27344473204560021395], [10.899837088513560701], [8.8918233086963009981],
             [-17.692595220380059828]]
    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.52565358264899531004], [-0.50206453725675848077]]
    b2 = np.array(b2)

    LW2_1 = [[0.0058256312421214673583, 0.0022656993331152401779, 0.0036700473033542918393, -0.00051605029340631139358,
              0.099849422901760478966, -8.1672653041630954087e-06, 3.5756628077713670244, 0.00015150831463868190299,
              0.00075810982871767984906, -0.00055559573855416951801],
             [0.0089012898041524700365, 0.0010328237895090299717,
              0.0046007193096992441902, 0.00095518822604149903905, 0.12631904208074767881, -0.00074507760374932540445,
              3.4985287090533119247, 0.0024581869179151854925, 0.0014596763242494086021, -0.0014531213881480722037]]
    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[8.25232457706449 * 10 ** (-5)], [0.0484487820623466]]
    y1_xoffset = [[585338.40937719], [1201.63685145923]]

    xp1 = [(x[i][0] - x_xoffset) * x_gain + x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1), 0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1 * xp1[i]
        a = 2 / (1 + np.exp(-2 * b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:, 1]
