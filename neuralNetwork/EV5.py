### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -258 + 273.15
    Tmax = -240 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0
    x_gain = 2
    x_ymin = -1

    # Layer 1
    b1 = [[-10.734707933978393513], [-7.5177123281766311536], [-8.3613149060751101871], [4.57587014749930443],
          [1.5533913838894479742], [1.5571937867996461513], [-4.6540240678230837545], [-7.7895030619492660051],
          [10.907064806477169583], [-14.10575156194878943]]

    b1 = np.array(b1)

    IW1_1 = [[1.4012294808249954325], [7.7765959855575124138], [15.216894732397754808], [-13.653019204612437676],
             [-13.994406127189758848], [14.025373784555078771], [-13.960282005615827217], [-14.019248703630845299],
             [14.022330113490427905], [-14.131028957862719508]]

    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.94587726068359079257], [3.8184334409385667364]]
    b2 = np.array(b2)

    LW2_1 = [[-1.3042153840800072562, -0.29080458512596157883, -0.12562655191651167508, 0.0073337314855790505103,
              -0.0026034922534708118333, 0.022360674992658528815, -0.035753755864978399581, -0.047708584490003126677,
              0.059788255470586325335, -0.048513202786850728732],
             [4.6158439879591295352, 0.18380075404211940193, 0.017107685481563689178, -0.00086133324572937840224,
              -0.0014637382706026095657, 0.00060211291199318303733, -0.000290279199002849847, -7.8431801088978039121*10**(-5),
              -0.00057266722247489875754, -0.002094030157016261301]]


    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[6.8804348993241*10**(-6)], [1.27742246383024*10**(-6)]]
    y1_xoffset = [[-739314.579110966], [11590.983940858]]

    xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1),0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,0]