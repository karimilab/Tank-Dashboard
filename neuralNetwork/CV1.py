### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -170 + 273.15
    Tmax = -130 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[-7.1860167313655587407],[-4.9510817195974015092],[2.4176005872471182379],[2.6809799679152854779],[0.85481430726846441281],
          [-0.37364833941900110759],[0.19189739929693364062],[-5.5944016044552942191],[-1.7858050729622882979],[12.500175851465092691]]


    b1 = np.array(b1)

    IW1_1 = [[6.6343971422820455786],[5.3706661791838419262],[-3.1101241436996680534],[-5.63224587988993175],[-1.9066519031974795695],
             [-8.467408981542716262],[0.72951550803177989124],[-9.8122247527277384194],[-1.2816696628132917546],[12.490234883087284246]]


    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.41145297847952910786], [0.015136002464959861374]]
    b2 = np.array(b2)

    LW2_1 = [[0.034601554840821995007, 0.017998930722716879188, -0.057044548175911855004, -0.00065891846119621032708, -0.081694875912279987795,
              -4.3219284259182321611e-05, 1.2220043209332733802, -3.1958244004914561831e-05, -0.43646213571012343335, 0.00036787153951763388541],
             [0.095359242666421928369, 0.049088536766890143725, -0.13863439356637077826, 0.00085505994391477319408, -0.22057824391632765981,
              -0.0015206891547729392382, 1.0439254700505689044, 0.0012272670206960308113, 0.0028403967152065526421, 0.0023908362485956808491]]

    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[6.28312752600286*10**(-5)], [0.0112404303643407]]
    y1_xoffset = [[529278.582475826], [2149.84072457443]]


    xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1), 0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,1]

