### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -170 + 273.15
    Tmax = -130 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[-5.4659836470057632241],[-6.3112160998070532258],[3.5093427712738973767],[2.7388190807465297993],[-1.0001100865238170545],
          [-0.050671316605543456624],[-1.6199133093108155634],[-0.19515072270546562905],[8.2642815765633219627],[-4.4137170921377837374]]

    b1 = np.array(b1)

    IW1_1 = [[5.3191961549465860415],[7.5955762691729944436],[-5.1283676883686464265],[-5.63206176497242339],[3.4726991756527256783],
             [-6.7662140615419561485],[-8.3891621852053308572],[-0.45843321035804124319],[11.427747519114822339],[-4.2438977841069416286]]

    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.31180297502305898139], [-0.17825346758835852734]]
    b2 = np.array(b2)

    LW2_1 = [[0.060265649881227768836, 0.009806744613589709475, -0.029372628699245451056, -0.0098723936464147499931, 0.025237196135635353578,
             -0.0016343789167856202088, -0.00063351675942744929519, -2.1499597031671848768, 0.00028288985315490900547, -0.013482246355602542018],
             [0.14388510866512740916, 0.020977316536027790922, -0.075436339107375530166, -0.020880167180678487621, 0.084219826766348773739,
             -0.0084950221887451510955, -0.009933698841604568508, -1.7693030937355875842, -0.0019296000646688864135, 0.024178063704714883309]]

    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[2.8320569907456*10**(-5)], [0.0134082990380211]]
    y1_xoffset = [[6906.85449849907], [3448.91851335571]]


    xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1), 0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,0]
