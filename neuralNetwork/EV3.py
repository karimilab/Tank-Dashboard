### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -170 + 273.15
    Tmax = -130 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[5.1952400661641355839],[-3.9604682403002757773],[3.9701289451609964587],[-1.7974702249448459845],[-0.52606735031388318635],
          [0.74348380765231181222],[0.55832006484219653952],[4.3633059765111443795],[3.0306621284847263809],[-6.7210211699214932324]]
    b1 = np.array(b1)

    IW1_1 = [[-4.7293048616048469768],[4.5715387482312364043],[-5.737883584790778535],[2.8877871587543819665],[1.6364931592332119248],
             [7.3267614363920445797],[1.0254527931665626816],[7.1974596455205350765],[3.2277969790105087711],[-6.1140684998870815647]]
    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.10493518412208253932], [-0.13384196282041052606]]
    b2 = np.array(b2)

    LW2_1 = [[-0.12114641029004019623, 0.055347454516618793674, -0.0058591655974223983902, 0.092058140164351959234, 0.27432084190546407454,
              0.00014696694946875953026, 0.82081690430806941716, 0.00033225835700616767297, 0.047246271986072403692, -0.0257278090782403282],
             [-0.1095216029224221066, 0.050115209535335492053, -0.005156983651851907921, 0.085354308167720188694, 0.2521606475029142258,
              -0.0001070143364404226293, 0.85875775175505753012, 0.00086675557431791590193, 0.058702467578802548787, -0.02968593635667366934]]
    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[0.000100895463238042], [0.0285077394543941]]
    y1_xoffset = [[551143.646860372], [957.502977632497]]


    xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1), 0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,0]