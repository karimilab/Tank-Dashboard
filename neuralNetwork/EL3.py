### The code EEL takes input x of dimension Q x 1 and returns output y of dimension Q x 2 where
### Q is the number of samples.

import numpy as np
import pandas as pd

def ANN(x):

    x = np.array(x)

    Tmin = -170 + 273.15
    Tmax = -130 + 273.15
    x = (x - Tmin) / (Tmax - Tmin)

    Q = len(x)

    x_xoffset = 0.05
    x_gain = 4
    x_ymin = -1

    # Layer 1
    b1 = [[3.5956963486475892466],[6.6274789160069769167],[-1.7046086430680438273],[-2.915385478328086144],[-0.31964122017499796424],
          [1.2222391100256193575],[-0.91015656992682414383],[-4.3119085945973862906],[4.3738754290653130141],[5.3993049200686105138]]
    b1 = np.array(b1)

    IW1_1 = [[-3.1215188664718285239],[-8.1878419735979690586],[2.2360577882710019892],[7.9899421860093884362],[1.2436965259093850644],
             [8.6900453052645012519],[-1.2574736294580957097],[-6.6827532512848897284],[5.2187065909786385376],[4.9778364022774068687]]
    IW1_1 = np.array(IW1_1)

    # Layer 2
    b2 = [[-0.028271027400500307186], [0.22831073007814500775]]
    b2 = np.array(b2)

    LW2_1 = [[-0.15688325706251946001, -0.00068615409605411194736, 0.13883295646686535929, 0.00018565976595940724813, 0.53566711850009673945,
              0.00011476466758417965582, -0.58956265262418061646, -0.0011949079445065483203, 0.010801421980671193843, 0.052888049673521654592],
             [0.073613473017431138579, -0.00013433857928022417162, -0.0694817055541852302, 0.00015522035974149231332, -0.41415695408824532153,
              -2.256654011026195582e-05, 0.81108432424114251802, 0.0049512372757640147475, -0.023877133266130567274, -0.10725847456172413197]]
    LW2_1 = np.array(LW2_1)

    # Output 1
    y1_ymin = -1
    y1_gain = [[4.80218049852965*10**(-5)], [0.0268855251998255]]
    y1_xoffset = [[4261.97123434814], [2052.67456045579]]


    xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

    a1 = np.empty((len(b1),0))
    a2 = np.array([])

    for i in range(len(xp1)):
        b3 = b1 + IW1_1*xp1[i]
        a = 2 / (1 + np.exp(-2*b3)) - 1
        a1 = np.append(a1, a, axis=1)

    a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

    a3 = a2 - y1_ymin
    a3 = np.divide(a3, y1_gain)
    a3 = a3 + y1_xoffset

    y1 = np.transpose(a3)

    return y1[:,0]
