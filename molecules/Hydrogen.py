import numpy as np
from molecules.Component import Component

class Nitrogen(Component):
    def vapor_pressure(T):
        P_s = 0.1327*(T**3) - 4.7969*(T**2) + 61.499*T - 278.21
        return P_s
    
    def density(T):
        LD = 73.39 + 0*T
        return LD
    
    def liq_enthalpy(T):
        x = np.array(T)

        Tmin = -258 + 273.15
        Tmax = -240 + 273.15
        x = (x - Tmin) / (Tmax - Tmin)

        Q = len(x)

        x_xoffset = 0
        x_gain = 2
        x_ymin = -1

        # Layer 1
        b1 = [[10.35757697677199296], [11.598666688878049413], [-8.7792239655998631775], [-4.6104309070357052391],
            [-1.4955839343447343559], [-1.5628599258166584463], [4.6518542889999086043], [7.8523914793979221471],
            [-10.750394888534451354], [14.186483669451710909]]

        b1 = np.array(b1)

        IW1_1 = [[1.9080022131105405236], [-11.59539807783799148], [13.695943065336411593], [14.286419658458356707],
                [13.73131970853766326], [-13.992309270770107332], [13.990174129028265071], [14.130275287514134419],
                [-13.887306184181612778], [14.299712225324910264]]

        IW1_1 = np.array(IW1_1)

        # Layer 2
        b2 = [[10.072552180115035725], [2.132369754140571505]]
        b2 = np.array(b2)

        LW2_1 = [[-10.139661919862755113, -0.25003994609056784393, 0.22654236029935972963, 0.11461095113540953339,
                0.077230924297407202439, -0.077926631143471661312, 0.070581803644641533113,
                0.065894005912409805981, -0.061196286551330823789, 0.080467234510204266318],
                [-2.938590852955687005, -0.17924800529208079203, 0.011273008994426934187, 0.0016224911541086158365,
                0.00086512057185046935953, -0.00062327169531904507392, 0.00040310270090259552912, 0.000277472166367824318,
                3.5735423991604726871*10**(-5), 0.00065973131547274839123]]

        LW2_1 = np.array(LW2_1)

        # Output 1
        y1_ymin = -1
        y1_gain = [[5.74814438229587*10**(-6)], [1.0045629916181*10**(-6)]]
        y1_xoffset = [[-984039.45244745],[10922.0505419513]]


        xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

        a1 = np.empty((len(b1),0))
        a2 = np.array([])

        for i in range(len(xp1)):
            b3 = b1 + IW1_1*xp1[i]
            a = 2 / (1 + np.exp(-2*b3)) - 1
            a1 = np.append(a1, a, axis=1)

        a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

        a3 = a2 - y1_ymin
        a3 = np.divide(a3, y1_gain)
        a3 = a3 + y1_xoffset

        y1 = np.transpose(a3)

        return y1[:,0]
    
    def vap_enthalpy(T):
        x = np.array(T)

        Tmin = -258 + 273.15
        Tmax = -240 + 273.15
        x = (x - Tmin) / (Tmax - Tmin)

        Q = len(x)

        x_xoffset = 0
        x_gain = 2
        x_ymin = -1

        # Layer 1
        b1 = [[-10.734707933978393513], [-7.5177123281766311536], [-8.3613149060751101871], [4.57587014749930443],
            [1.5533913838894479742], [1.5571937867996461513], [-4.6540240678230837545], [-7.7895030619492660051],
            [10.907064806477169583], [-14.10575156194878943]]

        b1 = np.array(b1)

        IW1_1 = [[1.4012294808249954325], [7.7765959855575124138], [15.216894732397754808], [-13.653019204612437676],
                [-13.994406127189758848], [14.025373784555078771], [-13.960282005615827217], [-14.019248703630845299],
                [14.022330113490427905], [-14.131028957862719508]]

        IW1_1 = np.array(IW1_1)

        # Layer 2
        b2 = [[-0.94587726068359079257], [3.8184334409385667364]]
        b2 = np.array(b2)

        LW2_1 = [[-1.3042153840800072562, -0.29080458512596157883, -0.12562655191651167508, 0.0073337314855790505103,
                -0.0026034922534708118333, 0.022360674992658528815, -0.035753755864978399581, -0.047708584490003126677,
                0.059788255470586325335, -0.048513202786850728732],
                [4.6158439879591295352, 0.18380075404211940193, 0.017107685481563689178, -0.00086133324572937840224,
                -0.0014637382706026095657, 0.00060211291199318303733, -0.000290279199002849847, -7.8431801088978039121*10**(-5),
                -0.00057266722247489875754, -0.002094030157016261301]]


        LW2_1 = np.array(LW2_1)

        # Output 1
        y1_ymin = -1
        y1_gain = [[6.8804348993241*10**(-6)], [1.27742246383024*10**(-6)]]
        y1_xoffset = [[-739314.579110966], [11590.983940858]]

        xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

        a1 = np.empty((len(b1),0))
        a2 = np.array([])

        for i in range(len(xp1)):
            b3 = b1 + IW1_1*xp1[i]
            a = 2 / (1 + np.exp(-2*b3)) - 1
            a1 = np.append(a1, a, axis=1)

        a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

        a3 = a2 - y1_ymin
        a3 = np.divide(a3, y1_gain)
        a3 = a3 + y1_xoffset

        y1 = np.transpose(a3)

        return y1[:,0]

    def liq_heat_capacity(T):
        x = np.array(T)

        Tmin = -258 + 273.15
        Tmax = -240 + 273.15
        x = (x - Tmin) / (Tmax - Tmin)

        Q = len(x)

        x_xoffset = 0
        x_gain = 2
        x_ymin = -1

        # Layer 1
        b1 = [[10.35757697677199296], [11.598666688878049413], [-8.7792239655998631775], [-4.6104309070357052391],
            [-1.4955839343447343559], [-1.5628599258166584463], [4.6518542889999086043], [7.8523914793979221471],
            [-10.750394888534451354], [14.186483669451710909]]

        b1 = np.array(b1)

        IW1_1 = [[1.9080022131105405236], [-11.59539807783799148], [13.695943065336411593], [14.286419658458356707],
                [13.73131970853766326], [-13.992309270770107332], [13.990174129028265071], [14.130275287514134419],
                [-13.887306184181612778], [14.299712225324910264]]

        IW1_1 = np.array(IW1_1)

        # Layer 2
        b2 = [[10.072552180115035725], [2.132369754140571505]]
        b2 = np.array(b2)

        LW2_1 = [[-10.139661919862755113, -0.25003994609056784393, 0.22654236029935972963, 0.11461095113540953339,
                0.077230924297407202439, -0.077926631143471661312, 0.070581803644641533113,
                0.065894005912409805981, -0.061196286551330823789, 0.080467234510204266318],
                [-2.938590852955687005, -0.17924800529208079203, 0.011273008994426934187, 0.0016224911541086158365,
                0.00086512057185046935953, -0.00062327169531904507392, 0.00040310270090259552912, 0.000277472166367824318,
                3.5735423991604726871*10**(-5), 0.00065973131547274839123]]

        LW2_1 = np.array(LW2_1)

        # Output 1
        y1_ymin = -1
        y1_gain = [[5.74814438229587*10**(-6)], [1.0045629916181*10**(-6)]]
        y1_xoffset = [[-984039.45244745],[10922.0505419513]]


        xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

        a1 = np.empty((len(b1),0))
        a2 = np.array([])

        for i in range(len(xp1)):
            b3 = b1 + IW1_1*xp1[i]
            a = 2 / (1 + np.exp(-2*b3)) - 1
            a1 = np.append(a1, a, axis=1)

        a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

        a3 = a2 - y1_ymin
        a3 = np.divide(a3, y1_gain)
        a3 = a3 + y1_xoffset

        y1 = np.transpose(a3)

        return y1[:,1]


    def vap_heat_capacity(T):
        Tmin = -258 + 273.15
        Tmax = -240 + 273.15
        x = (x - Tmin) / (Tmax - Tmin)

        Q = len(x)

        x_xoffset = 0
        x_gain = 2
        x_ymin = -1

        # Layer 1
        b1 = [[-10.734707933978393513], [-7.5177123281766311536], [-8.3613149060751101871], [4.57587014749930443],
            [1.5533913838894479742], [1.5571937867996461513], [-4.6540240678230837545], [-7.7895030619492660051],
            [10.907064806477169583], [-14.10575156194878943]]

        b1 = np.array(b1)

        IW1_1 = [[1.4012294808249954325], [7.7765959855575124138], [15.216894732397754808], [-13.653019204612437676],
                [-13.994406127189758848], [14.025373784555078771], [-13.960282005615827217], [-14.019248703630845299],
                [14.022330113490427905], [-14.131028957862719508]]

        IW1_1 = np.array(IW1_1)

        # Layer 2
        b2 = [[-0.94587726068359079257], [3.8184334409385667364]]
        b2 = np.array(b2)

        LW2_1 = [[-1.3042153840800072562, -0.29080458512596157883, -0.12562655191651167508, 0.0073337314855790505103,
                -0.0026034922534708118333, 0.022360674992658528815, -0.035753755864978399581, -0.047708584490003126677,
                0.059788255470586325335, -0.048513202786850728732],
                [4.6158439879591295352, 0.18380075404211940193, 0.017107685481563689178, -0.00086133324572937840224,
                -0.0014637382706026095657, 0.00060211291199318303733, -0.000290279199002849847, -7.8431801088978039121*10**(-5),
                -0.00057266722247489875754, -0.002094030157016261301]]


        LW2_1 = np.array(LW2_1)

        # Output 1
        y1_ymin = -1
        y1_gain = [[6.8804348993241*10**(-6)], [1.27742246383024*10**(-6)]]
        y1_xoffset = [[-739314.579110966], [11590.983940858]]

        xp1 = [(x[i][0]-x_xoffset)*x_gain+x_ymin for i in range(len(x))]

        a1 = np.empty((len(b1),0))
        a2 = np.array([])

        for i in range(len(xp1)):
            b3 = b1 + IW1_1*xp1[i]
            a = 2 / (1 + np.exp(-2*b3)) - 1
            a1 = np.append(a1, a, axis=1)

        a2 = np.repeat(b2, Q, axis=1) + np.matmul(LW2_1, a1)

        a3 = a2 - y1_ymin
        a3 = np.divide(a3, y1_gain)
        a3 = a3 + y1_xoffset

        y1 = np.transpose(a3)

        return y1[:,1]